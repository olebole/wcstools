    wcs->wcschar = mchar;
	wcs->wcsname = (char *) calloc (strlen (wcsname)+2, 1);
	strcpy (wcs->wcsname, wcsname);
    wcs->cel.flag = 0;
    wcs->lin.flag = 0;
    wcs->wcsl.flag = 0;
    wcs->ncoeff1 = 0;
    wcs->ncoeff2 = 0;
    wcs->rotmat = 0;
    wcs->rot = 0.0;
    wcs->naxis = naxes;
    wcs->naxes = naxes;
    wcs->lin.naxis = naxes;
    wcs->nxpix = 0;
    hgetr8 (hstring, "NAXIS1", &wcs->nxpix);
    if (wcs->nxpix < 1) {
    wcs->nypix = 0;
    hgetr8 (hstring, "NAXIS2", &wcs->nypix);
    wcs->naxes = nax;
    wcs->naxis = nax;
    hgets (hstring, "INSTRUME", 16, wcs->instrument);
    hgeti4 (hstring, "DETECTOR", &wcs->detector);
    wcs->wcsproj = getdefwcs();
    for (i = 0; i < 81; i++) wcs->pc[i] = 0.0;
    for (i = 0; i < naxes; i++) wcs->pc[(i*naxes)+i] = 1.0;
    for (i = 0; i < 9; i++) wcs->cdelt[i] = 0.0;
    for (i = 0; i < naxes; i++) wcs->cdelt[i] = 1.0;
	if ((wcs->wcs = wcsinitn (hstring, wcsname)) == NULL) {
	depwcs = wcs->wcs;
	depwcs->wcsdep = wcs;
	wcs->wcs = NULL;
    wcs->radvel = 0.0;
    wcs->zvel = 0.0;
    if (hgetr8c (hstring, "VSOURCE", mchar, &wcs->radvel))
	wcs->zvel = wcs->radvel / cvel;
    else if (hgetr8c (hstring, "ZSOURCE", mchar, &wcs->zvel))
	wcs->radvel = wcs->zvel * cvel;
    else if (hgetr8 (hstring, "VELOCITY", &wcs->radvel))
	wcs->zvel = wcs->radvel / cvel;
	wcs->prj.p[i] = 0.0;
		mgetr8 (hstring, "WAT1",keyword, &wcs->prj.p[i]);
	strcpy (wcs->ctype[0], ctype1);
	strcpy (wcs->ctype[1], ctype2);
	strcpy (wcs->ctype[2], "");
	hgetsc (hstring, "CTYPE3", mchar, 9, wcs->ctype[2]);
	strcpy (wcs->ctype[3], "");
	hgetsc (hstring, "CTYPE4", mchar, 9, wcs->ctype[3]);
	if (wcs->prjcode == WCS_LIN) {
	    if (!hgetsc (hstring, "CUNIT1", mchar, 16, wcs->units[0])) {
		if (!mgetstr (hstring, "WAT1", "units", 16, wcs->units[0])) {
		    wcs->units[0][0] = 0;
		if (!hgetsc (hstring, "CUNIT2", mchar, 16, wcs->units[1])) {
		    if (!mgetstr (hstring, "WAT2", "units", 16, wcs->units[1])) {
			wcs->units[1][0] = 0;
	wcs->crpix[0] = 1.0;
	hgetr8c (hstring, "CRPIX1", mchar, &wcs->crpix[0]);
	wcs->crpix[1] = 1.0;
	hgetr8c (hstring, "CRPIX2", mchar, &wcs->crpix[1]);
	wcs->xrefpix = wcs->crpix[0];
	wcs->yrefpix = wcs->crpix[1];
	wcs->crval[0] = 0.0;
	hgetr8c (hstring, "CRVAL1", mchar, &wcs->crval[0]);
	wcs->crval[1] = 0.0;
	hgetr8c (hstring, "CRVAL2", mchar, &wcs->crval[1]);
	if (wcs->syswcs == WCS_NPOLE)
	    wcs->crval[1] = 90.0 - wcs->crval[1];
	if (wcs->syswcs == WCS_SPA)
	    wcs->crval[1] = wcs->crval[1] - 90.0;
	wcs->xref = wcs->crval[0];
	wcs->yref = wcs->crval[1];
	if (wcs->coorflip) {
	    wcs->cel.ref[0] = wcs->crval[1];
	    wcs->cel.ref[1] = wcs->crval[0];
	    wcs->cel.ref[0] = wcs->crval[0];
	    wcs->cel.ref[1] = wcs->crval[1];
	wcs->longpole = 999.0;
	hgetr8c (hstring, "LONPOLE", mchar, &wcs->longpole);
	wcs->cel.ref[2] = wcs->longpole;
	wcs->latpole = 999.0;
	hgetr8c (hstring, "LATPOLE", mchar, &wcs->latpole);
	wcs->cel.ref[3] = wcs->latpole;
	wcs->lin.crpix = wcs->crpix;
	wcs->lin.cdelt = wcs->cdelt;
	wcs->lin.pc = wcs->pc;
	wcs->prj.r0 = 0.0;
	hgetr8c (hstring, "PROJR0", mchar, &wcs->prj.r0);
	    hgetr8c (hstring, keyword, mchar, &wcs->prj.p[i]);
	if (wcs->prjcode == WCS_AZP || wcs->prjcode == WCS_SIN ||
	    wcs->prjcode == WCS_COP || wcs->prjcode == WCS_COE ||
	    wcs->prjcode == WCS_COD || wcs->prjcode == WCS_COO) {
	    hgetr8c (hstring, pvkey1, mchar, &wcs->prj.p[1]);
	    hgetr8c (hstring, pvkey2, mchar, &wcs->prj.p[2]);
	else if (wcs->prjcode == WCS_SZP) {
	    hgetr8c (hstring, pvkey1, mchar, &wcs->prj.p[1]);
	    hgetr8c (hstring, pvkey2, mchar, &wcs->prj.p[2]);
	    if (wcs->prj.p[3] == 0.0)
		wcs->prj.p[3] = 90.0;
	    hgetr8c (hstring, pvkey3, mchar, &wcs->prj.p[3]);
	else if (wcs->prjcode == WCS_CEA) {
	    if (wcs->prj.p[1] == 0.0)
		wcs->prj.p[1] = 1.0;
	    hgetr8c (hstring, pvkey1, mchar, &wcs->prj.p[1]);
	else if (wcs->prjcode == WCS_CYP) {
	    if (wcs->prj.p[1] == 0.0)
		wcs->prj.p[1] = 1.0;
	    hgetr8c (hstring, pvkey1, mchar, &wcs->prj.p[1]);
	    if (wcs->prj.p[2] == 0.0)
		wcs->prj.p[2] = 1.0;
	    hgetr8c (hstring, pvkey2, mchar, &wcs->prj.p[2]);
	else if (wcs->prjcode == WCS_AIR) {
	    if (wcs->prj.p[1] == 0.0)
		wcs->prj.p[1] = 90.0;
	    hgetr8c (hstring, pvkey1, mchar, &wcs->prj.p[1]);
	else if (wcs->prjcode == WCS_BON) {
	    hgetr8c (hstring, pvkey1, mchar, &wcs->prj.p[1]);
	else if (wcs->prjcode == WCS_ZPN) {
		hgetr8c (hstring, keyword, mchar, &wcs->prj.p[i]);
		wcs->prj.p[i] = 0.0;
		mgetr8 (hstring, mkey, keyword, &wcs->prj.p[i]);
	if (strncmp (wcs->ptype,"LINEAR",6) &&
	    strncmp (wcs->ptype,"PIXEL",5))
	wcs->ncoeff1 = 0;
	wcs->ncoeff2 = 0;
	if (wcs->wcsproj != WCS_OLD &&
	    wcs->prjcode = WCS_PLT;
	    (void)strcpy (wcs->ptype, "PLATE");
		wcs->x_coeff[i] = 0.0;
		if (hgetr8 (hcoeff, keyword, &wcs->x_coeff[i]))
		    wcs->ncoeff1 = i + 1;
		wcs->y_coeff[i] = 0.0;
		if (hgetr8 (hcoeff, keyword, &wcs->y_coeff[i]))
		    wcs->ncoeff2 = i + 1;
	    platepos (wcs->crpix[0], wcs->crpix[1], wcs, &ra0, &dec0);
	    platepos (wcs->crpix[0], wcs->crpix[1]+1.0, wcs, &ra1, &dec1);
	    wcs->yinc = dec1 - dec0;
	    wcs->xinc = -wcs->yinc;
	    wcs->wcson = 1;
	    rot = degrad (wcs->rot);
	    platepos (wcs->crpix[0], wcs->crpix[1], wcs, &ra0, &dec0);
	    platepos (wcs->crpix[0]+cos(rot),
		      wcs->crpix[1]+sin(rot), wcs, &ra1, &dec1);
	    wcs->cdelt[0] = -wcsdist (ra0, dec0, ra1, dec1);
	    wcs->xinc = wcs->cdelt[0];
	    platepos (wcs->crpix[0]+sin(rot),
		      wcs->crpix[1]+cos(rot), wcs, &ra1, &dec1);
	    wcs->cdelt[1] = wcsdist (ra0, dec0, ra1, dec1);
	    wcs->yinc = wcs->cdelt[1];
	    wcs->cd[0] = cd[0];
	    wcs->cd[1] = cd[1];
	    wcs->cd[2] = cd[2];
	    wcs->cd[3] = cd[3];
	    (void) matinv (2, wcs->cd, wcs->dc);
	    wcs->rotmat = 1;
	    if (cdelt1 == 0.0 || (wcs->nypix > 1 && cdelt2 == 0.0)) {
	    if (cdelt2 == 0.0 && wcs->nypix > 1)
	    wcs->cdelt[2] = 1.0;
	    wcs->cdelt[3] = 1.0;
		wcs->pc[i] = 0.0;
	    wcs->xinc = 1.0;
	    wcs->yinc = 1.0;
	    wcs->cdelt[0] = 1.0;
	    wcs->cdelt[1] = 1.0;
	    wcs->rot = 0.0;
	    wcs->rotmat = 0;
	if (wcs->prjcode == WCS_TNX) {
		wcs->ctype[0][6] = 'A';
		wcs->ctype[0][7] = 'N';
		wcs->ctype[1][6] = 'A';
		wcs->ctype[1][7] = 'N';
		wcs->prjcode = WCS_TAN;
	if (!strncmp (wcs->ptype,"LINEAR",6) ||
	    !strncmp (wcs->ptype,"PIXEL",5)) {
	    wcs->degout = -1;
	    wcs->ndec = 5;
	    wcs->epoch = 1900.0 + (mjd - 15019.81352) / 365.242198781;
	else if (!hgetdate (hstring,"DATE-OBS",&wcs->epoch)) {
	    if (!hgetdate (hstring,"DATE",&wcs->epoch)) {
		if (!hgetr8 (hstring,"EPOCH",&wcs->epoch))
		    wcs->epoch = wcs->equinox;
		    wcs->epoch = wcs->epoch + (ut / (24.0 * 365.242198781));
		    wcs->epoch = wcs->epoch + (ut / (24.0 * 365.242198781));
	wcs->wcson = 1;
	wcs->prjcode = WCS_DSS;
	wcs->plate_ra = hrrad (ra_hours);
	wcs->plate_dec = degrad (dec_deg);
	hgetr8 (hstring,"EQUINOX",&wcs->equinox);
	    strcpy (wcs->radecsys,"FK4");
	    strcpy (wcs->radecsys,"FK5");
	wcs->epoch = wcs->equinox;
	hgetr8 (hstring,"EPOCH",&wcs->epoch);
	(void)sprintf (wcs->center,"%2.0f:%2.0f:%5.3f %c%2.0f:%2.0f:%5.3f %s",
		       rah,ram,ras,decsign,decd,decm,decs,wcs->radecsys);
	hgetr8 (hstring,"PLTSCALE",&wcs->plate_scale);
	hgetr8 (hstring,"XPIXELSZ",&wcs->x_pixel_size);
	hgetr8 (hstring,"YPIXELSZ",&wcs->y_pixel_size);
	hgetr8 (hstring,"CNPIX1",&wcs->x_pixel_offset);
	hgetr8 (hstring,"CNPIX2",&wcs->y_pixel_offset);
	    wcs->ppo_coeff[i] = 0.0;
	    hgetr8 (hcoeff,keyword,&wcs->ppo_coeff[i]);
	    wcs->x_coeff[i] = 0.0;
	    hgetr8 (hcoeff, keyword, &wcs->x_coeff[i]);
	    wcs->y_coeff[i] = 0.0;
	    hgetr8 (hcoeff, keyword, &wcs->y_coeff[i]);
	wcs->wcson = 1;
	(void)strcpy (wcs->c1type, "RA");
	(void)strcpy (wcs->c2type, "DEC");
	(void)strcpy (wcs->ptype, "DSS");
	wcs->degout = 0;
	wcs->ndec = 3;
	strcpy (wcs->ctype[0], "RA---DSS");
	strcpy (wcs->ctype[1], "DEC--DSS");
	wcs->crpix[0] = 0.5 * wcs->nxpix;
	wcs->crpix[1] = 0.5 * wcs->nypix;
	wcs->xrefpix = wcs->crpix[0];
	wcs->yrefpix = wcs->crpix[1];
	dsspos (wcs->crpix[0], wcs->crpix[1], wcs, &ra0, &dec0);
	wcs->crval[0] = ra0;
	wcs->crval[1] = dec0;
	wcs->xref = wcs->crval[0];
	wcs->yref = wcs->crval[1];
	dsspos (wcs->crpix[0], wcs->crpix[1]+1.0, wcs, &ra1, &dec1);
	wcs->yinc = dec1 - dec0;
	wcs->xinc = -wcs->yinc;
	wcs->wcson = 1;
	rot = degrad (wcs->rot);
	dsspos (wcs->crpix[0]+cos(rot),
		wcs->crpix[1]+sin(rot), wcs, &ra1, &dec1);
	wcs->cdelt[0] = -wcsdist (ra0, dec0, ra1, dec1);
	dsspos (wcs->crpix[0]+sin(rot),
		wcs->crpix[1]+cos(rot), wcs, &ra1, &dec1);
	wcs->cdelt[1] = wcsdist (ra0, dec0, ra1, dec1);
	wcsdeltset (wcs, wcs->cdelt[0], wcs->cdelt[1], wcs->rot);
	if (wcs->rot == 0.)
	wcs->crpix[0] = 0.5 + (wcs->nxpix * 0.5);
	wcs->crpix[1] = 0.5 + (wcs->nypix * 0.5);
	    hgetr8 (hstring,"CRPIX1",&wcs->crpix[0]);
	    hgetr8 (hstring,"CRPIX2",&wcs->crpix[1]);
	    wcs->crpix[0] = dxrefpix - (double) (ix1 - 1);
	    wcs->crpix[1] = dyrefpix - (double) (iy1 - 1);
	wcs->xrefpix = wcs->crpix[0];
	wcs->yrefpix = wcs->crpix[1];
	wcs->crval[0] = -999.0;
	if (!hgetra (hstring,"RA",&wcs->crval[0])) {
	wcs->crval[1] = -999.0;
	if (!hgetdec (hstring,"DEC",&wcs->crval[1])) {
	wcs->xref = wcs->crval[0];
	wcs->yref = wcs->crval[1];
	wcs->coorflip = 0;
	wcs->cel.ref[0] = wcs->crval[0];
	wcs->cel.ref[1] = wcs->crval[1];
	wcs->cel.ref[2] = 999.0;
	if (!hgetr8 (hstring,"LONPOLE",&wcs->cel.ref[2]))
	    hgetr8 (hstring,"LONGPOLE",&wcs->cel.ref[2]);
	wcs->cel.ref[3] = 999.0;
	hgetr8 (hstring,"LATPOLE",&wcs->cel.ref[3]);
	    wcs->epoch = 1900.0 + (mjd - 15019.81352) / 365.242198781;
	else if (!hgetdate (hstring,"DATE-OBS",&wcs->epoch)) {
	    if (!hgetdate (hstring,"DATE",&wcs->epoch)) {
		if (!hgetr8 (hstring,"EPOCH",&wcs->epoch))
		    wcs->epoch = wcs->equinox;
		    wcs->epoch = wcs->epoch + (ut / (24.0 * 365.242198781));
		    wcs->epoch = wcs->epoch + (ut / (24.0 * 365.242198781));
	wcs->coorflip = 0;
	wcs->degout = 0;
	wcs->ndec = 3;
	wcs->wcson = 1;
    wcs->lin.crpix = wcs->crpix;
    wcs->lin.cdelt = wcs->cdelt;
    wcs->lin.pc = wcs->pc;
    wcs->printsys = 1;
    wcs->tabsys = 0;
    wcs->linmode = 0;
    if (strlen (wcs->radecsys) == 0 || wcs->prjcode == WCS_LIN)
	strcpy (wcs->radecsys, "LINEAR");
    wcs->syswcs = wcscsys (wcs->radecsys);
    if (wcs->syswcs == WCS_B1950)
	strcpy (wcs->radecout, "FK4");
    else if (wcs->syswcs == WCS_J2000)
	strcpy (wcs->radecout, "FK5");
	strcpy (wcs->radecout, wcs->radecsys);
    wcs->sysout = wcscsys (wcs->radecout);
    wcs->eqout = wcs->equinox;
    strcpy (wcs->radecin, wcs->radecsys);
    wcs->sysin = wcscsys (wcs->radecin);
    wcs->eqin = wcs->equinox;
	wcs->equinox = atof (eqstring+1);
	wcs->equinox = atof (eqstring+1);
	hgetr8 (hstring, eqkey, &wcs->equinox);
	    wcs->equinox = 1950.0;
            hgetr8 (hstring,"EPOCH",&wcs->equinox);
	    wcs->equinox = 1950.0;
	    wcs->equinox = 2000.0;
	    wcs->equinox = 2000.0;
	    wcs->equinox = 2000.0;
	    wcs->equinox = 2000.0;
	wcs->equinox = 2000.0;
	if (wcs->c1type[0] == 'R' || wcs->c1type[0] == 'D')
    if (!hgetdate (hstring,"DATE-OBS",&wcs->epoch)) {
	if (!hgetdate (hstring,"DATE",&wcs->epoch)) {
	    if (!hgetr8 (hstring,"EPOCH",&wcs->epoch))
		wcs->epoch = wcs->equinox;
		wcs->epoch = wcs->epoch + (ut / (24.0 * 365.242198781));
		wcs->epoch = wcs->epoch + (ut / (24.0 * 365.242198781));
    if (wcs->epoch == 0.0)
	wcs->epoch = wcs->equinox;
	strcpy (wcs->radecsys,systring);
	    if (!strncmp (wcs->radecsys,"FK4",3))
		wcs->equinox = 1950.0;
	    else if (!strncmp (wcs->radecsys,"FK5",3))
		wcs->equinox = 2000.0;
	    else if (!strncmp (wcs->radecsys,"ICRS",4))
		wcs->equinox = 2000.0;
	    else if (!strncmp (wcs->radecsys,"GAL",3) && ieq == 0)
		wcs->equinox = 2000.0;
    else if (wcs->syswcs != WCS_NPOLE) {
	    strcpy (wcs->radecsys,"FK5");
	    strcpy (wcs->radecsys,"FK4");
    if (wcs->c1type[0] == 'G')
	strcpy (wcs->radecsys,"GALACTIC");
    else if (wcs->c1type[0] == 'E')
	strcpy (wcs->radecsys,"ECLIPTIC");
    else if (wcs->c1type[0] == 'S')
	strcpy (wcs->radecsys,"SGALACTC");
    else if (wcs->c1type[0] == 'H')
	strcpy (wcs->radecsys,"HELIOECL");
    else if (wcs->c1type[0] == 'A')
	strcpy (wcs->radecsys,"ALTAZ");
    else if (wcs->c1type[0] == 'L')
	strcpy (wcs->radecsys,"LINEAR");
    wcs->syswcs = wcscsys (wcs->radecsys);
 * Oct  1 2003	Rename wcs->naxes to wcs->naxis to match WCSLIB 3.2
 * Dec  3 2003	Add back wcs->naxes for backward compatibility
