#
# This file is a Makefile for wcssubs.  If it has the name "Makefile.in"
# then it is a template for a Makefile;  to generate the actual Makefile,
# run "./configure", which is a configuration script generated by the
# "autoconf" program (constructs like "@foo@" will get replaced in the
# actual Makefile.
#

# Current WCS version;  used in various names.
VERSION = @WCS_MAJOR_VERSION@.@WCS_MINOR_VERSION@

#----------------------------------------------------------------
# Things you can change to personalize the Makefile for your own
# site (you can make these changes in either Makefile.in or
# Makefile, but changes to Makefile will get lost if you re-run
# the configuration script).
#----------------------------------------------------------------

# Default top-level directories in which to install architecture-
# specific files (exec_prefix) and machine-independent files such
# as scripts (prefix).  The values specified here may be overridden
# at configure-time with the --exec-prefix and --prefix options
# to the "configure" script.
prefix =                @prefix@
exec_prefix =           @exec_prefix@

# The following definition can be set to non-null for special systems
# like AFS with replication.  It allows the pathnames used for installation
# to be different than those used for actually reference files at
# run-time.  INSTALL_ROOT is prepended to $prefix and $exec_prefix
# when installing files.
INSTALL_ROOT =

# Directory in which to install the .a or .so binary for the WCS library:
LIB_INSTALL_DIR =       $(INSTALL_ROOT)$(exec_prefix)/lib

# Directory in which to install the program wish:
BIN_INSTALL_DIR =       $(INSTALL_ROOT)$(exec_prefix)/bin

# Directory in which to install the include file wcs.h:
INCLUDE_INSTALL_DIR =   $(INSTALL_ROOT)$(prefix)/include

# To change the compiler switches, for example to change from -O
# to -g, change the following line:
CFLAGS =                @CFLAGS@
# To add ld switches, change the following line:
LDFLAGS =               @LDFLAGS@

# Some versions of make, like SGI's, use the following variable to
# determine which shell to use for executing commands:
SHELL =                 /bin/sh

# extra modules added by configure.in to fix OS bugs
EXTRA_OBJS =            @EXTRA_OBJS@

# There are just too many different versions of "install" around;
# better to use the install-sh script that comes with the distribution,
# which is slower but guaranteed to work.

INSTALL =               @srcdir@/compat/install-sh -c
INSTALL_PROGRAM =       ${INSTALL}
INSTALL_DATA =          ${INSTALL} -m 644

#----------------------------------------------------------------
# The information below is modified by the configure script when
# Makefile is generated from Makefile.in.  You shouldn't normally
# modify any of this stuff by hand.
#----------------------------------------------------------------

AC_FLAGS =            elow should be usable as is.  The configure
# script won't modify it and you shouldn't need to modify it
# either.
#----------------------------------------------------------------

CC =            @CC@

CC_SWITCHES =   ${CFLAGS} -DWCS_VERSION="\"@WCS_VERSION@\"" \
                -I. ${AC_FLAGS}

DEPEND_SWITCHES = ${CFLAGS} -I. ${AC_FLAGS}

SRCS =  wcsinit.c wcs.c wcscon.c slasubs.c fitsfile.c imhfile.c \
        hget.c hput.c iget.c imio.c worldpos.c tnxpos.c dsspos.c platepos.c \
        wcslib.c lin.c cel.c proj.c sph.c wcstrig.c 

OBJS =  wcsinit.o wcs.o wcscon.o slasubs.o fitsfile.o imhfile.o \
        hget.o hput.o iget.o imio.o worldpos.o tnxpos.o dsspos.o platepos.o \
        wcslib.o lin.o cel.o proj.o sph.o wcstrig.o 


# these are all the modules going into the "normal" wcs library
LIBOBJS =       ${OBJS}

# the default library for this package
DEFLIB =        @DEFLIB@
# the actual library we are building (if this is a subpackage)
LIB =           @LIB@

PROGS =

TESTPROGS =

all:            $(LIB) $(PROGS)

testall:        $(TESTPROGS)

All:            all testall

install:        install-binaries

$(LIB):         $(LIBOBJS)
                ar crv $(LIB) $(LIBOBJS)
                $(RANLIB) $(LIB)

# Note: before running ranlib below, must cd to target directory because
# some ranlibs write to current directory, and this might not always be
# possible (e.g. if installing as root).

install-binaries: $(LIB) $(PROGS)
        @for i in $(LIB_INSTALL_DIR) $(INCLUDE_INSTALL_DIR) $(BIN_INSTALL_DIR) ; \
            do \
            if [ ! -d $$i ] ; then \
                echo "Making directory $$i"; \
                mkdir $$i; \
                chmod 755 $$i; \
                else true; \
                fi; \
            done;
        @if [ "$(LIB)" = "$(DEFLIB)" ] ; then \
            XLIB=`basename $(LIB)`; \
            echo "Installing $$XLIB"; \
            $(INSTALL_DATA) $$XLIB $(LIB_INSTALL_DIR)/$$XLIB; \
            (cd $(LIB_INSTALL_DIR); $(RANLIB) $$XLIB); \
            chmod 555 $(LIB_INSTALL_DIR)/$$XLIB; \
        fi;
        @echo "Installing fitshead.h"
        @$(INSTALL_DATA) fitshead.h $(INCLUDE_INSTALL_DIR)/fitshead.h
        @echo "Installing wcs.h"
        @$(INSTALL_DATA) wcs.h $(INCLUDE_INSTALL_DIR)/wcs.h
        @echo "Installing wcslib.h"
        @$(INSTALL_DATA) wcslib.h $(INCLUDE_INSTALL_DIR)/wcslib.h

Makefile:       Makefile.in
                $(SHELL) config.status

clean:
                rm -f *.a *.so *.o core errs *pure* .nfs* \
                        foo* *~ *.log \#* TAGS *.E a.out errors \
                        $(PROGS) $(TESTPROGS) \
                        gmon.out *.pg *.bak \
                        config.info config.log \
                        doc/*~

distclean:      clean
                rm -f Makefile config.status config.cache config.log

maintainer-clean:: clean
                rm -f config.status config.cache config.log

depend:
                makedepend -- $(DEPEND_SWITCHES) -- $(SRCS)


.c.o:
                $(CC) -c $(CC_SWITCHES) $<

cel.o:          wcslib.h cel.c

fitsfile.o:     fitsfile.h fitsfile.c

hget.o:         fitshead.h hget.c

hput.o:         fitshead.h hput.c

iget.o:         fitshead.h iget.c

imhfile.o:      fitsfile.h imhfile.c

imio.o:         fitshead.h imio.c

lin.o:          wcslib.h lin.c

platepos.o:     wcs.h platepos.c

proj.o:         wcslib.h proj.c

sph.o:          wcslib.h sph.c

tnxpos.o:       wcs.h tnxpos.c

wcs.o:          fitshead.h wcs.h wcs.c

wcsinit.o:      fitshead.h wcs.h wcsinit.c

wcscon.o:       wcs.h wcscon.c

wcslib.o:       wcslib.h wcslib.c

wcstrig.o:      wcslib.h wcstrig.c

worldpos.o:     wcs.h worldpos.c

cel.h:          wcslib.h
fitsfile.h:     fitshead.h
proj.h:         wcslib.h
wcs.h:          wcslib.h fitshead.h

#
# Target to create a proper WCS distribution from information in the
# master source directory.  DISTDIR must be defined to indicate where
# to put the distribution.  DISTDIR must be an absolute path name.
#

DISTNAME =      wcs@WCS_VERSION@
ZIPNAME =
wcs@WCS_MAJOR_VERSION@@WCS_MINOR_VERSION@@WCS_PATCH_LEVEL@.zip
DISTDIR =       /proj/rd/wcs/$(DISTNAME)
configure:      configure.in
                autoconf configure.in

dist:   configure
        rm -rf $(DISTDIR)
        mkdir $(DISTDIR)
        cp -p *.c *.h $(DISTDIR)/.
        cp Makefile.in $(DISTDIR)/.
        chmod 664 $(DISTDIR)/Makefile.in
        cp configure configure.in README $(DISTDIR)/.
        chmod 775 $(DISTDIR)/configure $(DISTDIR)/configure.in
        cd compat
        mkdir $(DISTDIR)/compat
        cp -p *.c *.h install-sh licence.terms $(DISTDIR)/compat
        chmod +x $(DISTDIR)/compat/install-sh
        cd ..
        mkdir $(DISTDIR)/doc
        cp -p ./doc/*.[13n] $(DISTDIR)/doc

#
# The following target can only be used for non-patch releases.  Use
# the "allpatch" target below for patch releases.
#

alldist: dist
        rm -f   /proj/rd/FTP/$(DISTNAME).tar.Z \
                /proj/rd/FTP/$(DISTNAME).tar.gz \
                /proj/rd/FTP/$(ZIPNAME)
        cd /proj/rd/FTP; tar cf $(DISTNAME).tar $(DISTNAME); \
                gzip -9 -c $(DISTNAME).tar > $(DISTNAME).tar.gz; \
                compress $(DISTNAME).tar; zip -r8 $(ZIPNAME) $(DISTNAME)

#
# The target below is similar to "alldist" except it works for patch
# releases.  It is needed because patch releases are peculiar: the
# patch designation appears in the name of the compressed file
# (e.g. wcs2.0p1.tar.gz) but the extracted source directory doesn't
# include the patch designation (e.g. wcs2.0).
#

allpatch: dist
        rm -f   /proj/rd/FTP/$(DISTNAME).tar.Z \
                /proj/rd/FTP/$(DISTNAME).tar.gz \
                /proj/rd/FTP/$(ZIPNAME)
        mv /proj/rd/FTP/wcs${VERSION} /proj/rd/FTP/old
        mv /proj/rd/FTP/$(DISTNAME) /proj/rd/FTP/wcs${VERSION}
        cd /proj/rd/FTP; tar cf $(DISTNAME).tar wcs${VERSION}; \
                gzip -9 -c $(DISTNAME).tar > $(DISTNAME).tar.gz; \
                compress $(DISTNAME).tar; zip -r8 $(ZIPNAME) wcs${VERSION}
        mv /proj/rd/FTP/wcs${VERSION} /proj/rd/FTP/$(DISTNAME)
        mv /proj/rd/FTP/old /proj/rd/FTP/wcs${VERSION}

# DO NOT DELETE THIS LINE -- make depend depends on it.
