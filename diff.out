Only in wcssubs-3.6.4: #make.out#
Only in wcssubs-3.6.4-RHL: .#make.out
Only in wcssubs-3.6.4-RHL: .DS_Store
diff -c wcssubs-3.6.4/Makefile wcssubs-3.6.4-RHL/Makefile
*** wcssubs-3.6.4/Makefile	Wed Apr 13 15:50:57 2005
--- wcssubs-3.6.4-RHL/Makefile	Wed May  3 14:30:02 2006
***************
*** 1,3 ****
--- 1,5 ----
+ CFLAGS = -g -Wall
+ 
  OBJS =  wcsinit.o wcs.o wcscon.o fitsfile.o imhfile.o \
  	hget.o hput.o iget.o imio.o worldpos.o tnxpos.o dsspos.o platepos.o \
          wcslib.o lin.o cel.o proj.o sph.o wcstrig.o dateutil.o distort.o
Only in wcssubs-3.6.4-RHL: TAGS
Only in wcssubs-3.6.4-RHL: cel.o
diff -c wcssubs-3.6.4/dateutil.c wcssubs-3.6.4-RHL/dateutil.c
*** wcssubs-3.6.4/dateutil.c	Fri Oct 14 20:14:06 2005
--- wcssubs-3.6.4-RHL/dateutil.c	Wed May  3 14:46:07 2006
***************
*** 2562,2568 ****
  double	tsec;	/* Seconds since start of day */
  {
      double date, time;
-     char *thms, *fdate;
  
      ts2dt (tsec, &date, &time);
      return (time);
--- 2562,2567 ----
Only in wcssubs-3.6.4-RHL: dateutil.o
Only in wcssubs-3.6.4-RHL: distort.o
Only in wcssubs-3.6.4-RHL: dsspos.o
diff -c wcssubs-3.6.4/fitsfile.c wcssubs-3.6.4-RHL/fitsfile.c
*** wcssubs-3.6.4/fitsfile.c	Mon Feb 27 14:32:52 2006
--- wcssubs-3.6.4-RHL/fitsfile.c	Wed May  3 14:38:54 2006
***************
*** 478,484 ****
      int fd;
      char *header;	/* FITS image header (filled) */
      int nbytes, i, ndiff;
!     int ntry, nbr, irec, offset;
      char *mwcs;		/* Pointer to WCS name separated by % */
      char *headstart;
      char *newhead;
--- 478,484 ----
      int fd;
      char *header;	/* FITS image header (filled) */
      int nbytes, i, ndiff;
!     int nbr, irec, offset;
      char *mwcs;		/* Pointer to WCS name separated by % */
      char *headstart;
      char *newhead;
***************
*** 1800,1806 ****
      int fd, ipos;
      int nbhead, lhead;
      int nbw, nbnew, nbold;
!     char *endhead, *lasthead, *oldheader, *head;
      char *ext, cext;
  
      /* Compare size of existing header to size of new header */
--- 1800,1808 ----
      int fd, ipos;
      int nbhead, lhead;
      int nbw, nbnew, nbold;
! 
! /************************************************************************************************************/
!     char *endhead, *lasthead, *oldheader;
      char *ext, cext;
  
      /* Compare size of existing header to size of new header */
Only in wcssubs-3.6.4-RHL: fitsfile.o
Only in wcssubs-3.6.4-RHL: hget.o
Only in wcssubs-3.6.4-RHL: hput.o
Only in wcssubs-3.6.4-RHL: iget.o
Only in wcssubs-3.6.4-RHL: imhfile.o
diff -c wcssubs-3.6.4/imio.c wcssubs-3.6.4-RHL/imio.c
*** wcssubs-3.6.4/imio.c	Mon Apr  3 13:43:18 2006
--- wcssubs-3.6.4-RHL/imio.c	Wed May  3 14:45:38 2006
***************
*** 765,771 ****
  	    else
  		ccon = (char) (dpix + 0.5);
  	    for (ipix = pix1; ipix < pix2; ipix++)
! 		*imc++ = *imc + ccon;
  	    break;
  
  	case 16:
--- 765,771 ----
  	    else
  		ccon = (char) (dpix + 0.5);
  	    for (ipix = pix1; ipix < pix2; ipix++)
! 		*imc++ += ccon;
  	    break;
  
  	case 16:
***************
*** 776,782 ****
  	    else
  		jcon = (short) (dpix + 0.5);
  	    for (ipix = pix1; ipix < pix2; ipix++)
! 		*im2++ = *im2 + jcon;
  	    break;
  
  	case 32:
--- 776,782 ----
  	    else
  		jcon = (short) (dpix + 0.5);
  	    for (ipix = pix1; ipix < pix2; ipix++)
! 		*im2++ += jcon;
  	    break;
  
  	case 32:
***************
*** 786,792 ****
  	    else
  		icon = (int) (dpix + 0.5);
  	    for (ipix = pix1; ipix < pix2; ipix++)
! 		*im2++ = *im2 + jcon;
  	    break;
  
  	case -16:
--- 786,792 ----
  	    else
  		icon = (int) (dpix + 0.5);
  	    for (ipix = pix1; ipix < pix2; ipix++)
! 		*im2++ += jcon;
  	    break;
  
  	case -16:
***************
*** 795,821 ****
  		ucon = (unsigned short) (dpix + 0.5);
  		imu = (unsigned short *) (image + pix1);
  		for (ipix = pix1; ipix < pix2; ipix++)
! 		    *imu++ = *imu + ucon;
  		}
  	    else {
  		icon = (int) (dpix - 0.5);
  		imu = (unsigned short *) (image + pix1);
! 		for (ipix = pix1; ipix < pix2; ipix++)
! 		    *imu++ = (unsigned short) (icon + (int) *imu);
  		}
  	    break;
  
  	case -32:
  	    rcon = (float) dpix;
  	    imr = (float *) (image + pix1);
  	    for (ipix = pix1; ipix < pix2; ipix++)
! 		*imr++ = *imr + rcon;
  	    break;
  
  	case -64:
  	    imd = (double *) (image + pix1);
  	    for (ipix = pix1; ipix < pix2; ipix++)
! 		*imd++ = *imd + dpix;
  	    break;
  	}
      return;
--- 795,823 ----
  		ucon = (unsigned short) (dpix + 0.5);
  		imu = (unsigned short *) (image + pix1);
  		for (ipix = pix1; ipix < pix2; ipix++)
! 		    *imu++ += ucon;
  		}
  	    else {
  		icon = (int) (dpix - 0.5);
  		imu = (unsigned short *) (image + pix1);
! 		for (ipix = pix1; ipix < pix2; ipix++) {
! 		    unsigned short tmp = (icon + (int) *imu);
! 		    *imu++ = tmp;
  		}
+ 	    }
  	    break;
  
  	case -32:
  	    rcon = (float) dpix;
  	    imr = (float *) (image + pix1);
  	    for (ipix = pix1; ipix < pix2; ipix++)
! 		*imr++ += rcon;
  	    break;
  
  	case -64:
  	    imd = (double *) (image + pix1);
  	    for (ipix = pix1; ipix < pix2; ipix++)
! 		*imd++ += dpix;
  	    break;
  	}
      return;
***************
*** 867,873 ****
  		else
  		    ccon = (char) (dpix + 0.5);
  		for (ipix = pix1; ipix < pix2; ipix++)
! 		    *imc++ = *imc * ccon;
  		}
  	    else {
  		for (ipix = pix1; ipix < pix2; ipix++) {
--- 869,875 ----
  		else
  		    ccon = (char) (dpix + 0.5);
  		for (ipix = pix1; ipix < pix2; ipix++)
! 		    *imc++ *= ccon;
  		}
  	    else {
  		for (ipix = pix1; ipix < pix2; ipix++) {
***************
*** 889,895 ****
  		else
  		    jcon = (short) (dpix + 0.5);
  		for (ipix = pix1; ipix < pix2; ipix++)
! 		    *im2++ = *im2 * jcon;
  		}
  	    else {
  		for (ipix = pix1; ipix < pix2; ipix++) {
--- 891,897 ----
  		else
  		    jcon = (short) (dpix + 0.5);
  		for (ipix = pix1; ipix < pix2; ipix++)
! 		    *im2++ *= jcon;
  		}
  	    else {
  		for (ipix = pix1; ipix < pix2; ipix++) {
***************
*** 910,916 ****
  		else
  		    icon = (int) (dpix + 0.5);
  		for (ipix = pix1; ipix < pix2; ipix++)
! 		    *im2++ = *im2 * jcon;
  		}
  	    else {
  		for (ipix = pix1; ipix < pix2; ipix++) {
--- 912,918 ----
  		else
  		    icon = (int) (dpix + 0.5);
  		for (ipix = pix1; ipix < pix2; ipix++)
! 		    *im2++ *= jcon;
  		}
  	    else {
  		for (ipix = pix1; ipix < pix2; ipix++) {
***************
*** 929,935 ****
  		ucon = (unsigned short) (dpix + 0.5);
  		imu = (unsigned short *) (image + pix1);
  		for (ipix = pix1; ipix < pix2; ipix++)
! 		    *imu++ = *imu * ucon;
  		}
  	    break;
  
--- 931,937 ----
  		ucon = (unsigned short) (dpix + 0.5);
  		imu = (unsigned short *) (image + pix1);
  		for (ipix = pix1; ipix < pix2; ipix++)
! 		    *imu++ *= ucon;
  		}
  	    break;
  
***************
*** 937,949 ****
  	    rcon = (float) dpix;
  	    imr = (float *) (image + pix1);
  	    for (ipix = pix1; ipix < pix2; ipix++)
! 		*imr++ = *imr * rcon;
  	    break;
  
  	case -64:
  	    imd = (double *) (image + pix1);
  	    for (ipix = pix1; ipix < pix2; ipix++)
! 		*imd++ = *imd * dpix;
  	    break;
  
  	}
--- 939,951 ----
  	    rcon = (float) dpix;
  	    imr = (float *) (image + pix1);
  	    for (ipix = pix1; ipix < pix2; ipix++)
! 		*imr++ *= rcon;
  	    break;
  
  	case -64:
  	    imd = (double *) (image + pix1);
  	    for (ipix = pix1; ipix < pix2; ipix++)
! 		*imd++ *= dpix;
  	    break;
  
  	}
Only in wcssubs-3.6.4-RHL: imio.o
Only in wcssubs-3.6.4-RHL: libwcs.a
Only in wcssubs-3.6.4-RHL: lin.o
Only in wcssubs-3.6.4-RHL: make.out
Only in wcssubs-3.6.4-RHL: platepos.o
Only in wcssubs-3.6.4-RHL: proj.o
Only in wcssubs-3.6.4-RHL: sph.o
Only in wcssubs-3.6.4-RHL: tnxpos.o
diff -c wcssubs-3.6.4/wcs.c wcssubs-3.6.4-RHL/wcs.c
*** wcssubs-3.6.4/wcs.c	Mon Apr 24 18:20:45 2006
--- wcssubs-3.6.4-RHL/wcs.c	Wed May  3 14:37:23 2006
***************
*** 2301,2307 ****
      pixcrd[3] = 1.0;
      for (i = 0; i < 4; i++)
  	imgcrd[i] = 0.0;
!     offscl = wcsrev (&wcs->ctype, &wcs->wcsl, pixcrd, &wcs->lin, imgcrd,
  		    &wcs->prj, &phi, &theta, wcs->crval, &wcs->cel, wcscrd);
      if (offscl == 0) {
  	*xpos = wcscrd[wcs->wcsl.lng];
--- 2301,2307 ----
      pixcrd[3] = 1.0;
      for (i = 0; i < 4; i++)
  	imgcrd[i] = 0.0;
!     offscl = wcsrev ((void *)&wcs->ctype, &wcs->wcsl, pixcrd, &wcs->lin, imgcrd,
  		    &wcs->prj, &phi, &theta, wcs->crval, &wcs->cel, wcscrd);
      if (offscl == 0) {
  	*xpos = wcscrd[wcs->wcsl.lng];
***************
*** 2331,2337 ****
      *xpix = 0.0;
      *ypix = 0.0;
      if (wcs->wcsl.flag != WCSSET) {
! 	if (wcsset (wcs->lin.naxis, &wcs->ctype, &wcs->wcsl) )
  	    return (1);
  	}
  
--- 2331,2337 ----
      *xpix = 0.0;
      *ypix = 0.0;
      if (wcs->wcsl.flag != WCSSET) {
! 	if (wcsset (wcs->lin.naxis, (void *)&wcs->ctype, &wcs->wcsl) )
  	    return (1);
  	}
  
***************
*** 2354,2360 ****
      imgcrd[3] = 1.0;
  
      /* Invoke WCSLIB subroutines for coordinate conversion */
!     offscl = wcsfwd (&wcs->ctype, &wcs->wcsl, wcscrd, wcs->crval, &wcs->cel,
  		     &phi, &theta, &wcs->prj, imgcrd, &wcs->lin, pixcrd);
  
      if (!offscl) {
--- 2354,2360 ----
      imgcrd[3] = 1.0;
  
      /* Invoke WCSLIB subroutines for coordinate conversion */
!     offscl = wcsfwd ((void *)&wcs->ctype, &wcs->wcsl, wcscrd, wcs->crval, &wcs->cel,
  		     &phi, &theta, &wcs->prj, imgcrd, &wcs->lin, pixcrd);
  
      if (!offscl) {
Only in wcssubs-3.6.4-RHL: wcs.o
diff -c wcssubs-3.6.4/wcscon.c wcssubs-3.6.4-RHL/wcscon.c
*** wcssubs-3.6.4/wcscon.c	Thu Jan  5 16:25:54 2006
--- wcssubs-3.6.4-RHL/wcscon.c	Wed May  3 14:38:22 2006
***************
*** 1828,1834 ****
      int i, j;
      double rtheta, rphi, v1[3], v2[3];
      double t, eps0, r;
!     double rmat[9], *rmati;	/* Rotation matrix */
      void v2s3(),s2v3(), fk5prec(), rotmat();
  
      rtheta = degrad (*dtheta);
--- 1828,1834 ----
      int i, j;
      double rtheta, rphi, v1[3], v2[3];
      double t, eps0, r;
!     double rmat[9];			/* Rotation matrix */
      void v2s3(),s2v3(), fk5prec(), rotmat();
  
      rtheta = degrad (*dtheta);
***************
*** 2071,2077 ****
  double *matrix;	/* 3x3 rotation matrix (returned) */
  
  {
!     int i, j, k, naxis, idig, iaxes, iaxis;
      double rot, srot, crot, *mati, w, wm[9], *wmi, matn[9];
      int axis[3];
  
--- 2071,2077 ----
  double *matrix;	/* 3x3 rotation matrix (returned) */
  
  {
!     int i, j, k, naxis, iaxes, iaxis;
      double rot, srot, crot, *mati, w, wm[9], *wmi, matn[9];
      int axis[3];
  
Only in wcssubs-3.6.4-RHL: wcscon.o
Only in wcssubs-3.6.4-RHL: wcsinit.o
Only in wcssubs-3.6.4-RHL: wcslib.o
Only in wcssubs-3.6.4-RHL: wcstrig.o
Only in wcssubs-3.6.4-RHL: worldpos.o
